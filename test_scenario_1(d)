# Import necessary libraries
from sklearn.linear_model import LinearRegression

# Define a function to initialize and train the Linear Regression model
def train_linear_regression(X_train, y_train):
    model = LinearRegression()  # Initialize the model
    model.fit(X_train, y_train)  # Train the model
    return model

# Train the model using the training data
linear_reg_model = train_linear_regression(X_train, y_train)




# Define a function to make predictions
def make_predictions(model, X_test):
    return model.predict(X_test)

# Make predictions using the trained model
predictions = make_predictions(linear_reg_model, X_test)




# Scatter plot of actual vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, predictions, color='blue', alpha=0.6)

# Plot the line of perfect prediction (y = x)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', label='Perfect Prediction')

plt.xlabel('Actual purchases')
plt.ylabel('Predicted purchases')
plt.title('Actual vs Predicted Purchases - Linear Regression(80-20 split)')
plt.legend()
plt.show()



# Import the necessary metrics
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Define a function to evaluate the model
def evaluate_model(y_test, y_pred):
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    r2 = r2_score(y_test, y_pred)
    
    # Return a dictionary with evaluation metrics
    return {
        "Mean Absolute Error (MAE)": mae,
        "Root Mean Squared Error (RMSE)": rmse,
        "R-squared (RÂ²)": r2
    }

# Evaluate the model's performance
metrics = evaluate_model(y_test, predictions)

# Display the metrics
print(metrics)
