# Select only numeric columns
numeric_cols = bfriday_sales_train_df.select_dtypes(include=[np.number])

# Display the names of numeric columns
print(numeric_cols.columns)



# Select only categorical columns (columns with object data type)
categorical_cols = bfriday_sales_train_df.select_dtypes(include=[object])

# Display the names of categorical columns
print(categorical_cols.columns)


# Calculate the correlation matrix for the numeric columns
get_correlation = numeric_cols.corr()

# Display the correlation of 'Purchase' with other numerical columns, sorted in descending order
print(get_correlation["Purchase"].sort_values(ascending=False), '\n')


# Select only numeric columns from the DataFrame
numeric_df = bfriday_sales_train_df.select_dtypes(include=['number'])

# Plot the heatmap for correlation matrix
plt.figure(figsize=(12, 12))

# Create the heatmap using the numeric data
sb.heatmap(numeric_df.corr(), 
           annot=True,            # Annotate cells with numeric values
           square=True,           # Make the heatmap square-shaped
           cmap='viridis',        # Color map style
           linewidths=0.5,        # Width of the lines separating cells
           linecolor="white",     # Color of the lines separating cells
           cbar_kws={'shrink': 0.8})  # Shrink color bar to fit

# Show the plot
plt.show()



# Select columns of interest (numeric features)
cols_of_interest = ['Purchase', 'Occupation', 'Marital_Status']

# Plot pairplot 
sb.pairplot(bfriday_sales_train_df[cols_of_interest], diag_kind='kde')
plt.suptitle('Pairplot of Key Variables', y=1.02)  # Title with spacing adjustment
plt.show()




# Ensure the 'Stay_In_Current_City_Years' is a categorical variable if necessary
bfriday_sales_train_df['Stay_In_Current_City_Years'] = bfriday_sales_train_df['Stay_In_Current_City_Years'].astype(str)

# Create a FacetGrid and map the barplot
year_trend = sb.FacetGrid(bfriday_sales_train_df, col="Stay_In_Current_City_Years", height=5, aspect=1)
year_trend.map(sb.barplot, "Marital_Status", "Purchase", estimator='sum', palette="Blues")

# Set title and labels for the plot
year_trend.set_axis_labels("Marital Status", "Total Purchase Amount")
year_trend.set_titles("Stay In Current City Years: {col_name}")

# Show the plot
plt.tight_layout()
plt.show()



# trend across the different cities
sb.jointplot(x='Occupation',y='Purchase',
              data=bfriday_sales_train_df, kind='hex')


