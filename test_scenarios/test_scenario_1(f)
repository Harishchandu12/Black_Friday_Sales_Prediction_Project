from sklearn.ensemble import RandomForestRegressor

# Define a function to train the Random Forest Regressor model
def train_random_forest(X_train, y_train):
    model = RandomForestRegressor(random_state=20, n_estimators=100)  # Initialize the model
    model.fit(X_train, y_train)  # Train the model
    return model


# Train the model for 80-20 split
rf_model_80 = train_random_forest(X_train, y_train)


# Make predictions for 80-20 split
predictions_80 = make_predictions(rf_model_80, X_test)




# Scatter plot of actual vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, predictions_80, color='lightgreen', alpha=0.6)

# Plot the line of perfect prediction (y = x)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', label='Perfect Prediction')

plt.xlabel('Actual purchases')
plt.ylabel('Predicted purchases')
plt.title('Actual vs Predicted Purchases - Random Forest Regressor(80-20 split)')
plt.legend()
plt.show()


# Import the necessary metrics
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Define a function to evaluate the model
def evaluate_model(y_test, y_pred):
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    r2 = r2_score(y_test, y_pred)
    
    # Return a dictionary with evaluation metrics
    return {
        "Mean Absolute Error (MAE)": mae,
        "Root Mean Squared Error (RMSE)": rmse,
        "R-squared (RÂ²)": r2
    }

# Evaluate the model's performance
metrics = evaluate_model(y_test, y_pred_80)

# Display the metrics
print(metrics)
